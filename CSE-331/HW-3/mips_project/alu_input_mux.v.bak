module alu_input_mux(input [31:0] read_data2, input [31:0] sign_extended, input ALUsrc, output [31:0] res);

wire [31:0] temp_res1;
wire [31:0] temp_res2;
wire ALUsrc_;

not not1(ALUsrc_, ALUsrc);

and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);
and and1(temp_res1[31], read_data2[31], ALUsrc_);

and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);
and and2(temp_res2[31], sign_extended[31], ALUsrc);

or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);
or or1(res[31], temp_res1[31], temp_res2[31]);

endmodule
