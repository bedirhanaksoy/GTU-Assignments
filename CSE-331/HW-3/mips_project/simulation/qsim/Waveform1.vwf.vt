// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2024 19:27:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sign_extend
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sign_extend_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] imm;
// wires                                               
wire [31:0] sign_ext_imm;

// assign statements (if any)                          
sign_extend i1 (
// port map - connection between master ports and signals/registers   
	.imm(imm),
	.sign_ext_imm(sign_ext_imm)
);
initial 
begin 
#1000000 $finish;
end 
// imm[ 15 ]
initial
begin
	imm[15] = 1'b1;
end 
// imm[ 14 ]
initial
begin
	imm[14] = 1'b1;
end 
// imm[ 13 ]
initial
begin
	imm[13] = 1'b1;
end 
// imm[ 12 ]
initial
begin
	imm[12] = 1'b1;
end 
// imm[ 11 ]
initial
begin
	imm[11] = 1'b1;
end 
// imm[ 10 ]
initial
begin
	imm[10] = 1'b1;
end 
// imm[ 9 ]
initial
begin
	imm[9] = 1'b1;
end 
// imm[ 8 ]
initial
begin
	imm[8] = 1'b0;
end 
// imm[ 7 ]
initial
begin
	imm[7] = 1'b0;
end 
// imm[ 6 ]
initial
begin
	imm[6] = 1'b1;
end 
// imm[ 5 ]
initial
begin
	imm[5] = 1'b0;
end 
// imm[ 4 ]
initial
begin
	imm[4] = 1'b1;
end 
// imm[ 3 ]
initial
begin
	imm[3] = 1'b0;
end 
// imm[ 2 ]
initial
begin
	imm[2] = 1'b1;
end 
// imm[ 1 ]
initial
begin
	imm[1] = 1'b1;
end 
// imm[ 0 ]
initial
begin
	imm[0] = 1'b0;
end 
endmodule

