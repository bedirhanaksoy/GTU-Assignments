// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/16/2024 17:28:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          memory_block_testbench
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_block_testbench_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [17:0] address;
reg byteOperations;
reg memRead;
reg memWrite;
reg [31:0] write_data;
// wires                                               
wire [31:0] read_data;

// assign statements (if any)                          
memory_block_testbench i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.byteOperations(byteOperations),
	.memRead(memRead),
	.memWrite(memWrite),
	.read_data(read_data),
	.write_data(write_data)
);
initial 
begin 
#1000000 $finish;
end 
// address[ 17 ]
initial
begin
	address[17] = 1'b0;
end 
// address[ 16 ]
initial
begin
	address[16] = 1'b0;
end 
// address[ 15 ]
initial
begin
	address[15] = 1'b0;
end 
// address[ 14 ]
initial
begin
	address[14] = 1'b0;
end 
// address[ 13 ]
initial
begin
	address[13] = 1'b0;
end 
// address[ 12 ]
initial
begin
	address[12] = 1'b0;
end 
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
end 

// byteOperations
initial
begin
	byteOperations = 1'b0;
end 

// memRead
initial
begin
	memRead = 1'b0;
end 

// memWrite
always
begin
	memWrite = 1'b0;
	memWrite = #25000 1'b1;
	#25000;
end 
// write_data[ 31 ]
initial
begin
	write_data[31] = 1'b1;
end 
// write_data[ 30 ]
initial
begin
	write_data[30] = 1'b0;
end 
// write_data[ 29 ]
initial
begin
	write_data[29] = 1'b1;
end 
// write_data[ 28 ]
initial
begin
	write_data[28] = 1'b0;
end 
// write_data[ 27 ]
initial
begin
	write_data[27] = 1'b1;
end 
// write_data[ 26 ]
initial
begin
	write_data[26] = 1'b0;
end 
// write_data[ 25 ]
initial
begin
	write_data[25] = 1'b1;
end 
// write_data[ 24 ]
initial
begin
	write_data[24] = 1'b0;
end 
// write_data[ 23 ]
initial
begin
	write_data[23] = 1'b1;
end 
// write_data[ 22 ]
initial
begin
	write_data[22] = 1'b0;
end 
// write_data[ 21 ]
initial
begin
	write_data[21] = 1'b1;
end 
// write_data[ 20 ]
initial
begin
	write_data[20] = 1'b0;
end 
// write_data[ 19 ]
initial
begin
	write_data[19] = 1'b1;
end 
// write_data[ 18 ]
initial
begin
	write_data[18] = 1'b0;
end 
// write_data[ 17 ]
initial
begin
	write_data[17] = 1'b1;
end 
// write_data[ 16 ]
initial
begin
	write_data[16] = 1'b0;
end 
// write_data[ 15 ]
initial
begin
	write_data[15] = 1'b1;
end 
// write_data[ 14 ]
initial
begin
	write_data[14] = 1'b0;
end 
// write_data[ 13 ]
initial
begin
	write_data[13] = 1'b1;
end 
// write_data[ 12 ]
initial
begin
	write_data[12] = 1'b0;
end 
// write_data[ 11 ]
initial
begin
	write_data[11] = 1'b1;
end 
// write_data[ 10 ]
initial
begin
	write_data[10] = 1'b0;
end 
// write_data[ 9 ]
initial
begin
	write_data[9] = 1'b1;
end 
// write_data[ 8 ]
initial
begin
	write_data[8] = 1'b0;
end 
// write_data[ 7 ]
initial
begin
	write_data[7] = 1'b1;
end 
// write_data[ 6 ]
initial
begin
	write_data[6] = 1'b0;
end 
// write_data[ 5 ]
initial
begin
	write_data[5] = 1'b1;
end 
// write_data[ 4 ]
initial
begin
	write_data[4] = 1'b0;
end 
// write_data[ 3 ]
initial
begin
	write_data[3] = 1'b1;
end 
// write_data[ 2 ]
initial
begin
	write_data[2] = 1'b0;
end 
// write_data[ 1 ]
initial
begin
	write_data[1] = 1'b1;
end 
// write_data[ 0 ]
initial
begin
	write_data[0] = 1'b0;
end 
endmodule

