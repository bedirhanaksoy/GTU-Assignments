// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/18/2024 00:43:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          instruction_block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module instruction_block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] pc;
// wires                                               
wire [31:0] instruction;

// assign statements (if any)                          
instruction_block i1 (
// port map - connection between master ports and signals/registers   
	.instruction(instruction),
	.pc(pc)
);
initial 
begin 
#1000000 $finish;
end 
// pc[ 31 ]
initial
begin
	pc[31] = 1'b0;
end 
// pc[ 30 ]
initial
begin
	pc[30] = 1'b0;
end 
// pc[ 29 ]
initial
begin
	pc[29] = 1'b0;
end 
// pc[ 28 ]
initial
begin
	pc[28] = 1'b0;
end 
// pc[ 27 ]
initial
begin
	pc[27] = 1'b0;
end 
// pc[ 26 ]
initial
begin
	pc[26] = 1'b0;
end 
// pc[ 25 ]
initial
begin
	pc[25] = 1'b0;
end 
// pc[ 24 ]
initial
begin
	pc[24] = 1'b0;
end 
// pc[ 23 ]
initial
begin
	pc[23] = 1'b0;
end 
// pc[ 22 ]
initial
begin
	pc[22] = 1'b0;
end 
// pc[ 21 ]
initial
begin
	pc[21] = 1'b0;
end 
// pc[ 20 ]
initial
begin
	pc[20] = 1'b0;
end 
// pc[ 19 ]
initial
begin
	pc[19] = 1'b0;
end 
// pc[ 18 ]
initial
begin
	pc[18] = 1'b0;
end 
// pc[ 17 ]
initial
begin
	pc[17] = 1'b0;
end 
// pc[ 16 ]
initial
begin
	pc[16] = 1'b0;
end 
// pc[ 15 ]
initial
begin
	pc[15] = 1'b0;
end 
// pc[ 14 ]
initial
begin
	pc[14] = 1'b0;
end 
// pc[ 13 ]
initial
begin
	pc[13] = 1'b0;
end 
// pc[ 12 ]
initial
begin
	pc[12] = 1'b0;
end 
// pc[ 11 ]
initial
begin
	pc[11] = 1'b0;
end 
// pc[ 10 ]
initial
begin
	pc[10] = 1'b0;
end 
// pc[ 9 ]
initial
begin
	pc[9] = 1'b0;
end 
// pc[ 8 ]
initial
begin
	pc[8] = 1'b0;
end 
// pc[ 7 ]
initial
begin
	pc[7] = 1'b0;
end 
// pc[ 6 ]
initial
begin
	pc[6] = 1'b0;
end 
// pc[ 5 ]
initial
begin
	pc[5] = 1'b0;
end 
// pc[ 4 ]
initial
begin
	pc[4] = 1'b0;
end 
// pc[ 3 ]
initial
begin
	pc[3] = 1'b0;
end 
// pc[ 2 ]
initial
begin
	pc[2] = 1'b1;
end 
// pc[ 1 ]
initial
begin
	pc[1] = 1'b0;
end 
// pc[ 0 ]
initial
begin
	pc[0] = 1'b0;
end 
endmodule

